{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rahul\\\\guitar_tabs\\\\src\\\\Fretboard.js\";\nimport React from 'react';\nimport './Fretboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Fretboard = ({\n  notes,\n  currentNote,\n  isPlaying\n}) => {\n  const strings = ['e', 'B', 'G', 'D', 'A', 'E'];\n  const frets = Array.from({\n    length: 12\n  }, (_, i) => i + 1); // Create array [1-12]\n\n  const isNoteActive = (string, fret) => {\n    if (!currentNote || !notes) return false;\n\n    // Convert currentNote to array if it's a single note\n    const activeNotes = Array.isArray(currentNote) ? currentNote : [currentNote];\n    return activeNotes.some(noteName => {\n      var _notes$noteName;\n      return (_notes$noteName = notes[noteName]) === null || _notes$noteName === void 0 ? void 0 : _notes$noteName.some(pos => pos.string === string && pos.fret === fret);\n    });\n  };\n\n  // Calculate note marker position based on string and fret\n  const getNotePosition = (string, fret) => {\n    const stringIndex = strings.indexOf(string);\n    const stringPosition = 10 + stringIndex * 15; // Distribute vertically\n    const fretPosition = 4 + fret * 8; // Distribute horizontally\n    return {\n      top: `${stringPosition}%`,\n      left: `${fretPosition}%`\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fretboard\",\n    children: [frets.map(fret => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fret fret-${fret}`\n    }, `fret-${fret}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)), strings.map((string, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `string string-${i + 1}`\n    }, `string-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)), strings.map(string => frets.map(fret => {\n      if (isNoteActive(string, fret - 1)) {\n        // Adjust fret index\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `note-marker ${currentNote ? 'current' : ''} ${isPlaying ? 'playing' : ''}`,\n          style: getNotePosition(string, fret - 1)\n        }, `note-${string}-${fret}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this);\n      }\n      return null;\n    }))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = Fretboard;\nexport default Fretboard;\nvar _c;\n$RefreshReg$(_c, \"Fretboard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fretboard","notes","currentNote","isPlaying","strings","frets","Array","from","length","_","i","isNoteActive","string","fret","activeNotes","isArray","some","noteName","_notes$noteName","pos","getNotePosition","stringIndex","indexOf","stringPosition","fretPosition","top","left","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/Rahul/guitar_tabs/src/Fretboard.js"],"sourcesContent":["import React from 'react';\r\nimport './Fretboard.css';\r\n\r\nconst Fretboard = ({ notes, currentNote, isPlaying }) => {\r\n  const strings = ['e', 'B', 'G', 'D', 'A', 'E'];\r\n  const frets = Array.from({ length: 12 }, (_, i) => i + 1); // Create array [1-12]\r\n\r\n  const isNoteActive = (string, fret) => {\r\n    if (!currentNote || !notes) return false;\r\n    \r\n    // Convert currentNote to array if it's a single note\r\n    const activeNotes = Array.isArray(currentNote) ? currentNote : [currentNote];\r\n    \r\n    return activeNotes.some(noteName => \r\n      notes[noteName]?.some(pos => \r\n        pos.string === string && pos.fret === fret\r\n      )\r\n    );\r\n  };\r\n\r\n  // Calculate note marker position based on string and fret\r\n  const getNotePosition = (string, fret) => {\r\n    const stringIndex = strings.indexOf(string);\r\n    const stringPosition = 10 + (stringIndex * 15); // Distribute vertically\r\n    const fretPosition = 4 + (fret * 8); // Distribute horizontally\r\n    return { top: `${stringPosition}%`, left: `${fretPosition}%` };\r\n  };\r\n\r\n  return (\r\n    <div className=\"fretboard\">\r\n      {/* Add fret lines first */}\r\n      {frets.map((fret) => (\r\n        <div key={`fret-${fret}`} className={`fret fret-${fret}`} />\r\n      ))}\r\n      \r\n      {/* Add strings */}\r\n      {strings.map((string, i) => (\r\n        <div key={`string-${i}`} className={`string string-${i + 1}`} />\r\n      ))}\r\n      \r\n      {/* Add note markers */}\r\n      {strings.map((string) =>\r\n        frets.map((fret) => {\r\n          if (isNoteActive(string, fret - 1)) {  // Adjust fret index\r\n            return (\r\n              <div\r\n                key={`note-${string}-${fret}`}\r\n                className={`note-marker ${currentNote ? 'current' : ''} ${isPlaying ? 'playing' : ''}`}\r\n                style={getNotePosition(string, fret - 1)}\r\n              />\r\n            );\r\n          }\r\n          return null;\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Fretboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}