{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rahul\\\\guitar_tabs\\\\src\\\\Fretboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport './Fretboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Fretboard = ({\n  notes,\n  currentNote,\n  isPlaying\n}) => {\n  _s();\n  const strings = ['e', 'B', 'G', 'D', 'A', 'E'];\n  const frets = Array.from({\n    length: 12\n  }, (_, i) => i);\n  const isNoteActive = (string, fret) => {\n    if (!currentNote || !notes) {\n      console.log('No current note or notes dictionary');\n      return false;\n    }\n    const activeNotes = Array.isArray(currentNote) ? currentNote : [currentNote];\n    console.log('Active notes to check:', activeNotes);\n    return activeNotes.some(noteName => {\n      const positions = notes[noteName] || [];\n      console.log(`Checking positions for ${noteName}:`, positions);\n      const hasMatch = positions.some(pos => {\n        const match = pos.string === string && pos.fret === fret;\n        if (match) {\n          console.log(`Match found at string=${string}, fret=${fret} for note=${noteName}`);\n        }\n        return match;\n      });\n      return hasMatch;\n    });\n  };\n\n  // Log props changes\n  useEffect(() => {\n    console.log('Fretboard received new props:', {\n      notesCount: Object.keys(notes || {}).length,\n      currentNote,\n      isPlaying\n    });\n  }, [notes, currentNote, isPlaying]);\n  const getNotePosition = (string, fret) => {\n    const stringIndex = strings.indexOf(string);\n    // Align with string positions from CSS\n    const stringPosition = 10 + stringIndex * 15;\n    // Align with fret positions from CSS\n    const fretPosition = 8.33 * (fret + 1);\n    return {\n      top: `${stringPosition}%`,\n      left: `${fretPosition}%`\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fretboard\",\n    children: [frets.map(fret => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fret fret-${fret + 1}`\n    }, `fret-${fret}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)), strings.map((string, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `string string-${i + 1}`\n    }, `string-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-overlay\",\n      style: {\n        position: 'absolute',\n        top: '-30px',\n        left: 0,\n        color: 'white'\n      },\n      children: [\"Current Notes: \", JSON.stringify(currentNote)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), strings.map(string => frets.map(fret => {\n      const active = isNoteActive(string, fret);\n      if (active) {\n        console.log(`Rendering marker at string=${string}, fret=${fret}`);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `note-marker ${isPlaying ? 'playing' : ''}`,\n          style: getNotePosition(string, fret)\n        }, `note-${string}-${fret}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this);\n      }\n      return null;\n    }))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Fretboard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Fretboard;\nexport default Fretboard;\nvar _c;\n$RefreshReg$(_c, \"Fretboard\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Fretboard","notes","currentNote","isPlaying","_s","strings","frets","Array","from","length","_","i","isNoteActive","string","fret","console","log","activeNotes","isArray","some","noteName","positions","hasMatch","pos","match","notesCount","Object","keys","getNotePosition","stringIndex","indexOf","stringPosition","fretPosition","top","left","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","style","position","color","JSON","stringify","active","_c","$RefreshReg$"],"sources":["C:/Users/Rahul/guitar_tabs/src/Fretboard.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport './Fretboard.css';\r\n\r\nconst Fretboard = ({ notes, currentNote, isPlaying }) => {\r\n  const strings = ['e', 'B', 'G', 'D', 'A', 'E'];\r\n  const frets = Array.from({ length: 12 }, (_, i) => i);\r\n\r\n  const isNoteActive = (string, fret) => {\r\n    if (!currentNote || !notes) {\r\n      console.log('No current note or notes dictionary');\r\n      return false;\r\n    }\r\n    \r\n    const activeNotes = Array.isArray(currentNote) ? currentNote : [currentNote];\r\n    console.log('Active notes to check:', activeNotes);\r\n    \r\n    return activeNotes.some(noteName => {\r\n      const positions = notes[noteName] || [];\r\n      console.log(`Checking positions for ${noteName}:`, positions);\r\n      \r\n      const hasMatch = positions.some(pos => {\r\n        const match = pos.string === string && pos.fret === fret;\r\n        if (match) {\r\n          console.log(`Match found at string=${string}, fret=${fret} for note=${noteName}`);\r\n        }\r\n        return match;\r\n      });\r\n      \r\n      return hasMatch;\r\n    });\r\n  };\r\n\r\n  // Log props changes\r\n  useEffect(() => {\r\n    console.log('Fretboard received new props:', {\r\n      notesCount: Object.keys(notes || {}).length,\r\n      currentNote,\r\n      isPlaying\r\n    });\r\n  }, [notes, currentNote, isPlaying]);\r\n\r\n  const getNotePosition = (string, fret) => {\r\n    const stringIndex = strings.indexOf(string);\r\n    // Align with string positions from CSS\r\n    const stringPosition = 10 + (stringIndex * 15);\r\n    // Align with fret positions from CSS\r\n    const fretPosition = 8.33 * (fret + 1);\r\n    return { top: `${stringPosition}%`, left: `${fretPosition}%` };\r\n  };\r\n\r\n  return (\r\n    <div className=\"fretboard\">\r\n      {/* Render frets */}\r\n      {frets.map((fret) => (\r\n        <div key={`fret-${fret}`} className={`fret fret-${fret + 1}`} />\r\n      ))}\r\n      \r\n      {/* Render strings */}\r\n      {strings.map((string, i) => (\r\n        <div key={`string-${i}`} className={`string string-${i + 1}`} />\r\n      ))}\r\n      \r\n      {/* Add debug display */}\r\n      <div className=\"debug-overlay\" style={{position: 'absolute', top: '-30px', left: 0, color: 'white'}}>\r\n        Current Notes: {JSON.stringify(currentNote)}\r\n      </div>\r\n      \r\n      {/* Render note markers */}\r\n      {strings.map(string =>\r\n        frets.map(fret => {\r\n          const active = isNoteActive(string, fret);\r\n          if (active) {\r\n            console.log(`Rendering marker at string=${string}, fret=${fret}`);\r\n            return (\r\n              <div\r\n                key={`note-${string}-${fret}`}\r\n                className={`note-marker ${isPlaying ? 'playing' : ''}`}\r\n                style={getNotePosition(string, fret)}\r\n              />\r\n            );\r\n          }\r\n          return null;\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Fretboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}